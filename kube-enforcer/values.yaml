# Specifies the secret data for imagePullSecrets needed to fetch the private docker images
imageCredentials:
  # If aqua-registry already exists in the cluster. Make create to false. So it won't attempt to create a new registry secret. 
  create: true
  name: aqua-registry-secret # example
  repositoryUriPrefix: "registry.aquasec.com" # for dockerhub - "docker.io"
  registry: "registry.aquasec.com" #REQUIRED only if create is true, for dockerhub - "index.docker.io/v1/"
  username: ""
  password: ""
  email: "example@gmail.com"

managed: false
environment: aws # aws, acs, onprem

aqua_enable_cache: yes
aqua_cache_expiration_period: 60

image:
  repository: kube-enforcer
  tag: "5.3"
  pullPolicy: Always

nameOverride: "aqua-kube-enforcer" 
fullnameOverride: "aqua-kube-enforcer"

namespace: "aqua"

logLevel:

# Set create to false if you want to use an existing secret for the kube-enforcer certs
certsSecret:
  create: true
  name: aqua-kube-enforcer-certs
  serverCertificate: ""
  serverKey: ""

aquaSecret:
  name: aqua-kube-enforcer-token
# Enter the enforcer token in "clear-text" format without quotes generated from the Console UI
  kubeEnforcerToken:

envs:
  gatewayAddress: aqua-gateway-svc.aqua:8443 


serviceAccount:
  name: aqua-kube-enforcer-sa

clusterRole:
  name: aqua-kube-enforcer

clusterRoleBinding:
  name: aqua-kube-enforcer  

role:
  name: aqua-kube-enforcer

roleBinding:
  name: aqua-kube-enforcer 

webhooks:
  caBundle: ""
  failurePolicy: Ignore
  validatingWebhook:
    name: kube-enforcer-admission-hook-config
  mutatingWebhook:
    name: kube-enforcer-me-injection-hook-config

securityContext:
  runAsUser: 11431
  runAsGroup: 11433
  fsGroup: 11433
container_securityContext: {}

livenessProbe:
  tcpSocket:
    port: 8080
  initialDelaySeconds: 60
  periodSeconds: 30

readinessProbe:
  tcpSocket:
    port: 8080
  initialDelaySeconds: 60
  periodSeconds: 30

resources: {}
  # Note: For recommendations please check the official sizing guide.
  # requests:
  #   cpu: 250m
  #   memory: 0.2Gi
  # limits:
  #   cpu: 500m
  #   memory: 1.5Gi

TLS:
  enabled: true
  secretName: ""              # provide certificates secret name created to enable tls/mtls communication between enforcer and gateway/envoy
  publicKey_fileName: ""      #provide filename of the public key eg: aqua_enforcer.crt
  privateKey_fileName: ""     #provide filename of the private key eg: aqua_enforcer.key
  rootCA_fileName: ""         #provide filename of the rootCA, if using self-signed certificates eg: rootCA.crt
  tls_verify: false           # change it to true for enabling mTLS between enforcer and gateway/envoy

# extraEnvironmentVars is a list of extra environment variables to set in the enforcer daemonset.
# https://docs.aquasec.com/docs/enforcer-optional-variables
extraEnvironmentVars: {}
#  ENV_NAME: value

# extraSecretEnvironmentVars is a list of extra environment variables to set in the enforcer daemonset.
# These variables take value from existing Secret objects.
extraSecretEnvironmentVars: []
  # - envName: ENV_NAME
  #   secretName: name
  #   secretKey: key